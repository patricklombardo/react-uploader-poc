{"version":3,"sources":["sf.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","status","setStatus","preview","setPreview","percentage","setPercentage","enableDragDrop","setEnableDragDrop","onDragEnter","event","preventDefault","stopPropagation","onDragLeave","className","onDragOver","onDrop","style","backgroundImage","type","dataTransfer","files","indexOf","reader","FileReader","onload","e","target","result","readAsDataURL","console","log","payload","FormData","append","xhr","XMLHttpRequest","upload","onprogress","done","position","loaded","total","totalSize","perc","Math","floor","open","send","clipPath","Number","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,gC,sFC6G5BC,G,MA1GH,WAAO,IAAD,EACYC,mBAAS,aADrB,mBACTC,EADS,KACDC,EADC,OAEcF,mBAAS,MAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGoBJ,mBAAS,GAH7B,mBAGTK,EAHS,KAGGC,EAHH,OAI4BN,oBAAS,GAJrC,mBAITO,EAJS,KAIOC,EAJP,KAQVC,EAAc,SAAAC,GACdH,GACFL,EAAU,iBAEZQ,EAAMC,iBACND,EAAME,mBAGFC,EAAc,SAAAH,GACdH,GACFL,EAAU,aAEZQ,EAAMC,kBAmDR,OACE,yBACEG,UAAU,MACVL,YAAaA,EACbI,YAAaA,EACbE,WAtEc,SAAAL,GAAK,OAAIA,EAAMC,kBAuE7BK,OAAQH,GAER,yBAAKC,UAAS,uBAAkBX,EAAU,OAAS,KACjD,yBAAKc,MAAO,CAAEC,gBAAgB,OAAD,OAASf,EAAT,SAE/B,yBACEW,UAAS,mBAAyB,SAAXb,EAAoB,OAAS,IACpDc,WA7Da,SAAAL,GACbH,GACFL,EAAU,QAEZQ,EAAMC,kBA0DFE,YAAaJ,EACbO,OAxDS,SAAAN,GACb,IACQS,EAAST,EAAMU,aAAaC,MAAM,GAAlCF,KACR,GAF2B,CAAC,aAAc,aAElBG,QAAQH,IAAS,GAAMZ,EAAgB,CAE7D,IAAMgB,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAAC,GAAC,OAAItB,EAAWsB,EAAEC,OAAOC,SACzCL,EAAOM,cAAcnB,EAAMU,aAAaC,MAAM,IAC9CS,QAAQC,IAAIR,GAGZ,IAAMS,EAAU,IAAIC,SACpBD,EAAQE,OAAO,OAAQxB,EAAMU,aAAaC,MAAM,IAGhD,IAAMc,EAAM,IAAIC,eAGhBD,EAAIE,OAAOC,WAAa,SAAAZ,GACtB,IAAMa,EAAOb,EAAEc,UAAYd,EAAEe,OACvBC,EAAQhB,EAAEiB,WAAajB,EAAEgB,MACzBE,EAAOC,KAAKC,MAAOP,EAAOG,EAAS,KAAQ,GAE7CE,GAAQ,KACV1C,EAAU,QACVM,GAAkB,IAElBN,EAAU,GAAD,OAAI0C,EAAJ,MAEXtC,EAAcsC,IAIhBT,EAAIY,KAAK,OAAQ,gCACjBZ,EAAIa,KAAKhB,GAETxB,GAAkB,GAEpBE,EAAMC,mBAoBF,yBAAKG,UAAS,wBAAmBX,EAAU,OAAS,KAClD,yBACEW,UAAU,qBACVG,MAAO,CAAEC,gBAAgB,OAAD,OAASf,EAAT,QAE1B,yBACEW,UAAU,wBACVG,MAAO,CACLC,gBAAgB,OAAD,OAASf,EAAT,KACf8C,SAAS,SAAD,OAAW,IAAMC,OAAO7C,GAAxB,gBAId,yBAAKS,UAAU,UAAUb,OC5FbkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.89217181.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sf.4fe9ce20.jpg\";","import React, { useState } from \"react\";\nimport BgImage from \"./sf.jpg\";\n\nconst App = () => {\n  const [status, setStatus] = useState(\"Drop Here\");\n  const [preview, setPreview] = useState(null);\n  const [percentage, setPercentage] = useState(0);\n  const [enableDragDrop, setEnableDragDrop] = useState(true);\n\n  const doNothing = event => event.preventDefault();\n\n  const onDragEnter = event => {\n    if (enableDragDrop) {\n      setStatus(\"File Detected\");\n    }\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const onDragLeave = event => {\n    if (enableDragDrop) {\n      setStatus(\"Drop Here\");\n    }\n    event.preventDefault();\n  };\n\n  const onDragOver = event => {\n    if (enableDragDrop) {\n      setStatus(\"Drop\");\n    }\n    event.preventDefault();\n  };\n\n  const onDrop = event => {\n    const supportedFileTypes = [\"image/jpeg\", \"image/png\"];\n    const { type } = event.dataTransfer.files[0];\n    if ((supportedFileTypes.indexOf(type) > -1) && enableDragDrop) {\n      // Read file\n      const reader = new FileReader();\n      reader.onload = e => setPreview(e.target.result);\n      reader.readAsDataURL(event.dataTransfer.files[0]);\n      console.log(reader);\n\n      // Create Form Data\n      const payload = new FormData();\n      payload.append(\"file\", event.dataTransfer.files[0]);\n\n      // XHR - New Request\n      const xhr = new XMLHttpRequest();\n\n      // XHR - Upload Progress\n      xhr.upload.onprogress = e => {\n        const done = e.position || e.loaded;\n        const total = e.totalSize || e.total;\n        const perc = Math.floor((done / total) * 1000) / 10;\n\n        if (perc >= 100) {\n          setStatus(\"Done\");\n          setEnableDragDrop(true);\n        } else {\n          setStatus(`${perc}%`);\n        }\n        setPercentage(perc);\n      };\n\n      // XHR - Make Request\n      xhr.open(\"POST\", \"http://localhost:5000/upload\");\n      xhr.send(payload);\n\n      setEnableDragDrop(false);\n    }\n    event.preventDefault();\n  };\n\n  return (\n    <div\n      className=\"App\"\n      onDragEnter={onDragEnter}\n      onDragLeave={onDragLeave}\n      onDragOver={doNothing}\n      onDrop={onDragLeave}\n    >\n      <div className={`ImagePreview ${preview ? \"Show\" : \"\"}`}>\n        <div style={{ backgroundImage: `url(${preview})` }}></div>\n      </div>\n      <div\n        className={`DropArea ${status === \"Drop\" ? \"Over\" : \"\"}`}\n        onDragOver={onDragOver}\n        onDragLeave={onDragEnter}\n        onDrop={onDrop}\n      >\n        <div className={`ImageProgress ${preview ? \"Show\" : \"\"}`}>\n          <div\n            className=\"ImageProgressImage\"\n            style={{ backgroundImage: `url(${preview})` }}\n          ></div>\n          <div\n            className=\"ImageProgressUploaded\"\n            style={{\n              backgroundImage: `url(${preview})`,\n              clipPath: `inset(${100 - Number(percentage)}% 0 0 0)`\n            }}\n          ></div>\n        </div>\n        <div className=\"Status\">{status}</div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}